#!/usr/bin/python

import sys, os, subprocess
from os import path
import shutil
import re
import tempfile
import atexit
import urllib2
import yaml
from zipfile import ZipFile

def sanitize_path(dir_name, name, where):
    if re.search(r'[^/\w.-]', name):
        raise ValueError, "unsanitary path in %s"%(where)
    full_name = path.normpath(path.join(dir_name, name))
    if full_name.find(dir_name + os.sep) != 0:
        raise ValueError, "unsafe path in %s"%(where)

def remove_temp(tdir):
    shutil.rmtree(tdir)

def download(url, dest):
    file_name = url.split('/')[-1]
    u = urllib2.urlopen(url)
    f = open(dest, 'w')
    meta = u.info()
    file_size = int(meta.getheaders("Content-Length")[0])
    print "Downloading: %s Bytes: %s" % (file_name, file_size)

    file_size_dl = 0
    block_sz = 65536
    while True:
        buffer = u.read(block_sz)
        if not buffer:
            break

        file_size_dl += block_sz
        f.write(buffer)
        status = r"%10d  [%3.2f%%]" % (file_size_dl, file_size_dl * 100. / file_size)
        status = status + chr(8)*(len(status)+1)
        print status,

    print
    f.close()

def extract(dir_name, zip_path):
    zipfile = ZipFile(zip_path, 'r')
    files = []
    for name in zipfile.namelist():
        sanitize_path(dir_name, name, "zip file")
    zipfile.extractall(dir_name)
    zipfile.close()

    for name in zipfile.namelist():
        if path.isfile(path.join(dir_name, name)):
            files.append(path.normpath(name))
    return files

def get_assertions(dir_name, file_names):
    assertions = {"build" : {}}
    sums = {}
    to_check = {}
    for file_name in file_names:
        shasum = subprocess.Popen(["sha256sum", '-b', os.path.join(dir_name, file_name)], stdout=subprocess.PIPE).communicate()[0][0:64]
        sums[file_name] = shasum
        to_check[file_name] = 1

    out_manifest = False
    error = False

    for file_name in file_names:
        if file_name.startswith("gitian"):
            del to_check[file_name]
            if file_name.endswith(".assert"):
                popen = subprocess.Popen(["gpg", '--keyid-format', 'long', '--quiet', '--batch', '--verify', os.path.join(dir_name, file_name + '.pgp'), os.path.join(dir_name, file_name)], stderr=subprocess.PIPE)
                gpgout = popen.communicate()[1]
                retcode = popen.wait()
                if retcode != 0:
                    print 'pgp verify failed for %s' %(file_name)
                    error = True
                    continue
                match = re.search(r'key ([A-F0-9]+)$', gpgout, re.M)
                assertions['build'][match.group(1)] = 1
                f = file(os.path.join(dir_name, file_name), 'r')
                assertion = yaml.load(f, OrderedDictYAMLLoader)
                f.close()
                if assertion['out_manifest']:
                    if out_manifest:
                        if out_manifest != assertion['out_manifest']:
                            print 'not all out manifests are identical'
                            error = True
                            continue
                    else:
                        out_manifest = assertion['out_manifest']

    for line in out_manifest.split("\n"):
        if line != "":
            shasum = line[0:64]
            summed_file = line[66:]
            if sums[summed_file] != shasum:
                print "sha256sum mismatch on %s" %(summed_file)
                error = True
            del to_check[summed_file]

    if len(to_check) > 0:
        print "Some of the files were not checksummed:"
        for key in to_check:
            print "  ", key

    return (error, assertions)

def check_assertions(config, assertions):
    total_weight = 0
    for key in assertions['build']:
        if not config['signers'].has_key(key):
            print 'key %s is not in config, skipping'%(key)
        total_weight += config['signers'][key]['weight']
    if total_weight < config['minimum_weight']:
        print "The total weight of signatures is %d, which is less than the minimum required %d"%(total_weight, config['minimum_weight'])
        return False
    return True


class OrderedDictYAMLLoader(yaml.Loader):
    """
    A YAML loader that loads ordered yaml maps into a dictionary.
    """

    def __init__(self, *args, **kwargs):
        yaml.Loader.__init__(self, *args, **kwargs)

        self.add_constructor(u'!omap', type(self).construct_yaml_map)

    def construct_yaml_map(self, node):
        data = dict()
        yield data
        for mapping in node.value:
            for key, value in mapping.value:
                key = self.construct_object(key)
                value = self.construct_object(value)
                data[key] = value

args = sys.argv[:]
full_prog = args.pop(0)

prog = os.path.basename(full_prog)

if len(args) < 2:
    print>>sys.stderr, "usage: %s URL CONFIG\n"%(full_prog)
    exit(1)

url = args.pop(0)
config_file = args.pop(0)

f = file(config_file, 'r')
config = yaml.safe_load(f)
f.close()

tempdir = tempfile.mkdtemp('', prog)

atexit.register(remove_temp, tempdir)

package_file = path.join(tempdir, "package")
download(url, package_file)

unpack_dir = path.join(tempdir, "unpack")
files = extract(unpack_dir, package_file)
(error, assertions) = get_assertions(unpack_dir, files)
if error:
    print "There were errors getting assertions, aborting"
    exit(1)

if not check_assertions(config, assertions):
    print "There were errors checking assertions, build is untrusted, aborting"
    exit(1)

#os.system("cd %s ; /bin/bash"%(tempdir))
